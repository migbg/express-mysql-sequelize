### Express MySQL API Testing
### Save this file as: api-tests.http
### Use with VS Code REST Client extension or similar tools

# Variables (adjust these to match your setup)
@baseUrl = http://localhost:3306
@contentType = application/json

### ===========================================
### HEALTH CHECK & SERVER INFO
### ===========================================

### Check if server is running
GET {{baseUrl}}/
Accept: application/json

###

### Health check endpoint
GET {{baseUrl}}/health
Accept: application/json

### ===========================================
### USER MANAGEMENT - CRUD OPERATIONS
### ===========================================

### Get all users (initially empty)
GET {{baseUrl}}/users
Accept: application/json

###

### Create a new user - Valid data
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "age": 30
}

###

### Create another user - Without age (optional field)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Jane Smith",
  "email": "jane.smith@example.com"
}

###

### Create user - With all fields
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Bob Johnson",
  "email": "bob.johnson@example.com",
  "age": 25
}

###

### Create user - Invalid email format (should fail)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Invalid User",
  "email": "invalid-email",
  "age": 20
}

###

### Create user - Missing required fields (should fail)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "age": 25
}

###

### Create user - Duplicate email (should fail after first user created)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "John Duplicate",
  "email": "john.doe@example.com",
  "age": 35
}

###

### Get all users (after creating some)
GET {{baseUrl}}/users
Accept: application/json

###

### Get user by ID - Valid ID (use ID from previous responses)
GET {{baseUrl}}/users/1
Accept: application/json

###

### Get user by ID - Invalid ID (should return 404)
GET {{baseUrl}}/users/999
Accept: application/json

###

### Get user by ID - Invalid format (should return 400)
GET {{baseUrl}}/users/abc
Accept: application/json

###

### Update user - Valid data (use existing user ID)
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}

{
  "name": "John Doe Updated",
  "email": "john.doe.updated@example.com",
  "age": 31
}

###

### Update user - Invalid email format (should fail)
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}

{
  "name": "John Doe",
  "email": "invalid-email-format",
  "age": 30
}

###

### Update user - Non-existent user (should return 404)
PUT {{baseUrl}}/users/999
Content-Type: {{contentType}}

{
  "name": "Non Existent",
  "email": "nonexistent@example.com",
  "age": 25
}

###

### Update user - Missing required fields (should fail)
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}

{
  "age": 30
}

###

### Delete user - Valid ID
DELETE {{baseUrl}}/users/2
Accept: application/json

###

### Delete user - Non-existent ID (should return 404)
DELETE {{baseUrl}}/users/999
Accept: application/json

###

### Delete user - Invalid ID format (should return 400)
DELETE {{baseUrl}}/users/abc
Accept: application/json

###

### Get all users (final check to see remaining users)
GET {{baseUrl}}/users
Accept: application/json

### ===========================================
### EDGE CASES & VALIDATION TESTS
### ===========================================

### Create user with extreme age values
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Too Old",
  "email": "tooold@example.com",
  "age": 200
}

###

### Create user with negative age
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Negative Age",
  "email": "negative@example.com",
  "age": -5
}

###

### Create user with whitespace in fields (should be trimmed)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "  Whitespace User  ",
  "email": "  WHITESPACE@EXAMPLE.COM  ",
  "age": 28
}

###

### Create user with very long name
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "This is a very long name that might exceed the database column limit for testing purposes and validation",
  "email": "longname@example.com",
  "age": 30
}

###

### Test with malformed JSON (should return 400)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Malformed JSON",
  "email": "malformed@example.com"
  // Missing comma here intentionally

###

### Test invalid route (should return 404)
GET {{baseUrl}}/invalid-endpoint
Accept: application/json

###

### Test invalid HTTP method on valid endpoint
PATCH {{baseUrl}}/users/1
Content-Type: {{contentType}}

{
  "name": "Patch Test"
}

### ===========================================
### BATCH TESTING SCRIPT
### ===========================================

### Create multiple users for bulk testing
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Test User 1",
  "email": "test1@example.com",
  "age": 25
}

###

POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Test User 2",
  "email": "test2@example.com",
  "age": 30
}

###

POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "Test User 3",
  "email": "test3@example.com",
  "age": 35
}

###

### Get all users to see the batch created
GET {{baseUrl}}/users
Accept: application/json

### ===========================================
### PERFORMANCE & STRESS TESTING EXAMPLES
### ===========================================

### Test concurrent requests (run multiple times quickly)
GET {{baseUrl}}/users
Accept: application/json

###

### Test database connection under load
GET {{baseUrl}}/health
Accept: application/json